//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
    Node(){
        data = 0;
        left = right = NULL;
    }
    Node(int x){
        data = x;
        left = right = NULL;
    }
};

// } Driver Code Ends
/* A binary tree node

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 */

class Solution
{
    public:
    //Function to return the lowest common ancestor in a Binary Tree.
    Node* lca(Node* root ,int n1 ,int n2 )
    {
       if(root==nullptr)
       return nullptr;
       if(root->data==n1 || root->data == n2)
       {
           return root;
       }
        Node *left = lca(root->left , n1, n2);
        Node* right = lca(root-> right , n1,n2);
        
        if(left!=nullptr && right == nullptr)
        {
            return left;
        }
        else if (left== nullptr && right !=nullptr)
        {
            return right;
        }
        else if ( left == nullptr && right == nullptr )
        {
            return nullptr;
        }
        else { 
           return root;
            
        }
    }
};
